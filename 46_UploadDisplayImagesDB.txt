Upload and display images with Database

Remember that, we dont directly store IMAGES in the DB, but instead will store them in the file directory and just store the "PATH" of the image in DB table 


1. Make a database table named "images" in DB "learnlaravel" using the php my admin
this table contains 4 Columns : id, path, created_at and updated_at 
SQL Query : 

CREATE TABLE `learnlaravel`.`images` (`id` INT(30) NOT NULL AUTO_INCREMENT , `path` VARCHAR(100) NOT NULL , `created_at` TIMESTAMP(100) NOT NULL , `updated_at` TIMESTAMP(100) NOT NULL , PRIMARY KEY (`id`)) ENGINE = InnoDB;

i.e TABLE = 

#	Name	    Type	    Collation	Attributes	Null	Default	Comments	
1	id Primary	int(30)			No	None		AUTO_INCREMENT	
2	path	    varchar(100)	utf8mb4_general_ci		No	None			
3	created_at	timestamp(6)			No	current_timestamp(6)		ON UPDATE CURRENT_TIMESTAMP(6)
4	updated_at	timestamp(6)			No	current_timestamp(6)			

2. Make View, Controller, Model, Route

php artisan make:controller ImageController
php artisan make:view uploadImage
php artisan make:view displayImage
php artisan make:modal Image


3. Make a form in uploadImage view file => 

<div>
<h1>Upload Image and Store Path in DB table</h1>
<form action="uploadimage" method="post" enctype="multipart/form-data">
    @csrf
    <input type="file" name="file" id="file">
    <button>Upload</button>
</form>
</div>

EXPLANATION: 
enctype="multipart/form-data" is necessary for file uploads because it allows the form to send the file data to the server.

In web.php => 

use App\Http\Controllers\ImageController ; 
Route::view('/uploadimageform', 'uploadImage');
Route::post('/uploadimage' , [ImageController::class, 'uploadimage']) ; 

In ImageController.php => 

  function uploadimage(Request $req){
        $path = $req->file('file')->store('public') ;
        $pathArray = explode('/' , $path ) ; 
        $imagepath = $pathArray[1] ; 
        $img = new Image() ; 
        $img->path = $imagepath ; 
        if($img->save()){
            return redirect('displayimage') ; 
        }else {
            return "ERROR in Uploading Image" ; 
        }
    }

EXPLANATION : 
uploadimage: This method handles the file upload. The image is stored in the public directory, and its path is saved in the database. The store method automatically places the file in the storage/app/public directory. The explode function is used to get the filename from the path. If the image is saved successfully, the user is redirected to the displayimage route.

displayimage: This method retrieves all image records from the database and passes them to the displayImage view.


making the displayimage route in web.php => 
use App\Http\Controllers\ImageController ; 
Route::view('/uploadimageform', 'uploadImage');
Route::post('/uploadimage' , [ImageController::class, 'uploadimage']) ; 
Route::get('/displayimage' ,  [ImageController::class, 'displayimage']) ; 


making the 'displayimage' function in the view file => 

    //import Image Model 
    use App\Models\Image  ;

    function displayimage(){
        $allImages= Image::all() ; 
        return view('displayImage' , ['allimages'=>$allImages]) ; 
    }

In displayImage.blade.php view file => 

<div>
    <h1>ALL IMAGES IN DATABASE TABLE named Image</h1>
    @foreach ($allimages as $image)
        <img src="{{url('storage/'.$image->path)}}" alt="Image" style="width: 200px ; margin:10px">
    @endforeach
</div>
<div>
    <a href="/uploadimageform">Upload New Image</a>
</div>

EXPLANATION : 
This view iterates through the allimages collection and displays each image using its stored path. The url helper function generates the correct URL for accessing the images stored in the public directory.

NOTE = make sure you run "php artisan storage:link" in the terminal before uploading any photos 
WHY? 
This command creates a symbolic link so that files stored in the storage/app/public directory are accessible from the public/storage URL. Without this, images stored in the public directory wouldnâ€™t be accessible via the web server.




ADDITIONAL CHATGPT NOTES : 
Summary
In this implementation, we:

Created a database table to store image paths.
Created necessary Laravel components (controller, model, views).
Implemented a form to upload images and store their paths in the database.
Implemented functionality to display all stored images on a web page.
Created a symbolic link to make the uploaded images accessible via URLs.
Additional Details
Storing Files:

Storing file paths instead of the actual files in the database is efficient. Files are stored on disk, and only their paths are stored in the database, reducing the database size and improving performance.
Security Considerations:

Validate the uploaded files to ensure they are images and not malicious files.
Restrict the file types and sizes to prevent abuse.
Optimization:

Use a library like Intervention Image to resize and optimize images before storing them to save disk space and improve load times.
By following these steps, you can efficiently handle image uploads and display them in your Laravel application, ensuring scalability and maintainability.