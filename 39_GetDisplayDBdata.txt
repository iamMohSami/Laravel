In prev lec, we stored data in the Employee table, now we will fetch the data and display it on UI

create a new view : list-employee.blade.php 

In web.php =>
Route::get('/listemployee' , [EmployeeController::class , 'list']) ; 




In EmployeeController.php =>

  function list(){
        $alldata = Employee::all() ; 
        //all function retrieves all the info from table and stored it in $alldata var
        return view('list-employee' , ['employeedata'=>$alldata]) ; 
    }


IN list-employee.blade.php =>

<div>
    <h1>EMPLOYEE LIST</h1>
    {{-- {{print_r($employeedata)}}  --}}
    <table border="1">
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Created At</th>
            <th>Updated At</th>
        </tr>

        @foreach ($employeedata as $emp )
            <tr>
                <td>{{$emp->name}}</td>
                <td>{{$emp->email}}</td>
                <td>{{$emp->phone}}</td>
                <td>{{$emp->created_at}}</td>
                <td>{{$emp->updated_at}}</td>
            </tr>
        @endforeach
    </table>
</div>


ON BROWSER => http://127.0.0.1:8000/listemployee

EMPLOYEE LIST
Name	        Email	                    Phone	Created At	            Updated At
Bill Gates	    billygate@microsoft.com	    11	    2024-07-02 15:06:41	    2024-07-02 15:06:41
Mohammad Sami	choudharisami2004@gmail.com	56478	2024-07-02 15:09:52	    2024-07-02 15:09:52
Rahul Malhotra	rahul@faang.com	            4563	2024-07-03 04:32:17	    2024-07-03 04:32:17









ADDITIONAL CHATGPT NOTES => 
### Display Data on UI from Employee Table

#### Steps to Fetch and Display Data

**1. Create a New View**

First, create a new view file named `list-employee.blade.php`.

**2. Define Route**

In `web.php`, add a new route to handle the display of the employee list:

```php
use App\Http\Controllers\EmployeeController;

Route::get('/listemployee', [EmployeeController::class, 'list']);
```

**3. Implement Controller Logic**

In `EmployeeController.php`, add a method to fetch and pass the data to the view:

```php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Employee;

class EmployeeController extends Controller
{
    public function list()
    {
        $alldata = Employee::all(); // Retrieves all records from the employees table
        return view('list-employee', ['employeedata' => $alldata]);
    }
}
```

**4. Create the HTML Structure in the View**

In `list-employee.blade.php`, structure the HTML to display the employee data in a table:

```html
<div>
    <h1>EMPLOYEE LIST</h1>
    {{-- {{print_r($employeedata)}} --}}
    <table border="1">
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Created At</th>
            <th>Updated At</th>
        </tr>

        @foreach ($employeedata as $emp)
            <tr>
                <td>{{ $emp->name }}</td>
                <td>{{ $emp->email }}</td>
                <td>{{ $emp->phone }}</td>
                <td>{{ $emp->created_at }}</td>
                <td>{{ $emp->updated_at }}</td>
            </tr>
        @endforeach
    </table>
</div>
```

**5. Test the Functionality**

Open your browser and navigate to `http://127.0.0.1:8000/listemployee` to see the list of employees displayed.

**Expected Output:**

```
EMPLOYEE LIST
-----------------------------------------------------------
Name            | Email                       | Phone  | Created At           | Updated At
-----------------------------------------------------------
Bill Gates      | billygate@microsoft.com     | 11     | 2024-07-02 15:06:41  | 2024-07-02 15:06:41
Mohammad Sami   | choudharisami2004@gmail.com | 56478  | 2024-07-02 15:09:52  | 2024-07-02 15:09:52
Rahul Malhotra  | rahul@faang.com             | 4563   | 2024-07-03 04:32:17  | 2024-07-03 04:32:17
-----------------------------------------------------------
```

### Summary

To fetch and display data from a MySQL database table in Laravel, follow these steps:

1. **Create a New View:** Add a Blade template file for displaying the data.
2. **Define Route:** Add a route to handle the request for displaying the data.
3. **Implement Controller Logic:** Create a method in the controller to fetch data from the database and pass it to the view.
4. **Create HTML Structure in the View:** Structure the HTML to display the data in a readable format, such as a table.
5. **Test the Functionality:** Access the route in the browser to verify that the data is displayed correctly.

### Additional Details

- **Pagination:** For larger datasets, consider implementing pagination to improve user experience. Laravel provides an easy way to paginate records using the `paginate` method.
- **Sorting and Filtering:** Enhance the table with sorting and filtering functionalities to make it easier for users to find specific records.
- **Styling:** Apply CSS to style the table and make it more visually appealing. You can use frameworks like Bootstrap for better design and responsiveness.