Here, ***** Insert Data in MySQL DB Table


1)Check .env file config

In .env file : check these - 
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=LearnLaravel
DB_USERNAME=root
DB_PASSWORD=

SESSION_DRIVER=database
{WE NEED TO DO MIGRATIONS FOR USING DB}

SESSION_DRIVER=file
{NO NEED TO DO MIGRATIONS, ALL SESSION DATA WILL BE STORED IN FILE SYS AND NOT IN DB}


2)Make Controller, Model, View

php artisan make:controller EmployeeController

php artisan make:view add-employee

php artisan make:model Employee
{NOTE => for automatic confguration of model with DB table, name the model as singular of the table name
i.e. table name : employees
     model name : Employee }


3)Create Table in MySql DB

In php my admin, in LearnLaravel database, Create a new table named "employees" with 6 columns


    #	 Name	    Type	   
	1	id Primary	int(30)					(AUTO_INCREMENT)	
	2	name	    varchar(100)			
	3	email	    varchar(100)	
	4	phone	    int(100)			
	5	created_at	timestamp		
	6	updated_at	timestamp		





4)Make HTML Form in add-employee view file =>

add-employee.blade.php => 
<div>
<h1>Add new Employee</h1>
<form action="" method="post">
    @csrf
    <input type="text" name="name" id="name" placeholder="Employee Name"> <br> <br>
    <input type="text" name="email" id="email" placeholder="Employee Mail Id"> <br> <br>
    <input type="number" name="phone" id="phone" placeholder="Employee Phone Number"> <br> <br>
    <button>Add new Employee</button>

</form>
</div>

web.php => 
//lec37 add data in DB through form in view 
use App\Http\Controllers\EmployeeController ; 

Route::view('/addemployee', 'add-employee');
Route::post('/addemployee' , [EmployeeController::class , 'addemployee']) ; 

EmployeeController.php => 
   function addemployee(Request $req){
        $emp = new Employee() ; //This creates the instance of our model
        //accessing input values via $req and storing in specific columns of table
        $emp->name = $req->name ; 
        $emp->email = $req->email ; 
        $emp->phone = $req->phone ; 
        // need to save this DB data
        $emp->save() ; 

        if($emp){
            return "New Employee added successfully :)" ; 
        }else{
            return "ERROR adding new Employee" ; 

        }
    }


ON BROWSER => http://127.0.0.1:8000/addemployee

Add new Employee
Employee Name

Employee Mail Id

Employee Phone Number

Add new Employee

When submit button is clicked , 
New Employee added successfully :)

And also, we can check the new data entered in table via php my admin! 




ADDITIONAL CHATGPT NOTES => 


### Adding Data to a Database in Laravel

#### Steps to Insert Data into MySQL Database Table

**1. Check `.env` File Configuration**

Ensure your `.env` file has the correct database connection settings:

```env
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=LearnLaravel
DB_USERNAME=root
DB_PASSWORD=

SESSION_DRIVER=database
# For using database sessions, we need to perform migrations
# SESSION_DRIVER=file
# Using file for session storage does not require migrations
```

**2. Create Controller, Model, and View**

Generate necessary components using Artisan commands:

```bash
php artisan make:controller EmployeeController
php artisan make:view add-employee
php artisan make:model Employee
```

> **Note:** For automatic configuration of the model with the database table, name the model as the singular form of the table name. For example, if the table name is `employees`, name the model `Employee`.

**3. Create Table in MySQL Database**

In phpMyAdmin, create a new table named `employees` in the `LearnLaravel` database with the following columns:

| #   | Name        | Type         | Details                  |
|-----|-------------|--------------|--------------------------|
| 1   | id          | int(30)      | AUTO_INCREMENT, Primary Key |
| 2   | name        | varchar(100) |                          |
| 3   | email       | varchar(100) |                          |
| 4   | phone       | int(100)     |                          |
| 5   | created_at  | timestamp    |                          |
| 6   | updated_at  | timestamp    |                          |

**4. Create HTML Form in the `add-employee` View File**

`add-employee.blade.php`:

```html
<div>
    <h1>Add New Employee</h1>
    <form action="/addemployee" method="post">
        @csrf
        <input type="text" name="name" id="name" placeholder="Employee Name"> <br><br>
        <input type="text" name="email" id="email" placeholder="Employee Email"> <br><br>
        <input type="number" name="phone" id="phone" placeholder="Employee Phone Number"> <br><br>
        <button type="submit">Add New Employee</button>
    </form>
</div>
```

**5. Define Routes**

Update `web.php` with the necessary routes:

```php
use App\Http\Controllers\EmployeeController;

Route::view('/addemployee', 'add-employee');
Route::post('/addemployee', [EmployeeController::class, 'addEmployee']);
```

**6. Implement the Controller Logic**

Update `EmployeeController.php`:

```php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Employee;

class EmployeeController extends Controller
{
    public function addEmployee(Request $req)
    {
        $emp = new Employee();
        $emp->name = $req->name;
        $emp->email = $req->email;
        $emp->phone = $req->phone;
        $emp->save();

        if ($emp) {
            return "New Employee added successfully :)";
        } else {
            return "ERROR adding new Employee";
        }
    }
}
```

**Testing the Functionality:**

On the browser, navigate to `http://127.0.0.1:8000/addemployee`. Fill out the form and submit it. If successful, the message "New Employee added successfully :)" will be displayed. You can also verify the new data entry in the `employees` table via phpMyAdmin.

### Summary

To insert data into a MySQL database table in Laravel, follow these steps:

1. Configure the database settings in the `.env` file.
2. Create the necessary controller, view, and model using Artisan commands.
3. Create the database table in phpMyAdmin.
4. Build the HTML form in the view file.
5. Define the required routes in `web.php`.
6. Implement the data insertion logic in the controller.

### Additional Details

- **Validation:** Implement validation to ensure data integrity before saving it to the database. Laravel provides powerful validation rules that can be used in the controller.
- **Mass Assignment:** Utilize Laravel's mass assignment feature by defining the `$fillable` property in the model.
- **Redirect and Flash Messages:** After inserting the data, redirect the user to a different page and use flash messages to provide feedback.
- **Error Handling:** Add error handling to manage database connection issues or other runtime errors effectively.