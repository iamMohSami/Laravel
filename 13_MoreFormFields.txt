Here, we will add on additional fields to our previous form
additional fileds => CheckBox, Radio button, Dropdowns, Range-Slider


MAKE A NEW VIEW => 

php artisan make:view userForm2

In userForm2.blade.php => 

<center>
    <h1>NEW USER REGISTRATION</h1>

    <form action="/newuserform2submit" method="post">
        @csrf
        <div class="formstyles">
            <div class="formitems">
                <input type="text" name="name" id="name" placeholder="Enter Name">
            </div>
            <div class="formitems">        
                <input type="text" name="email" id="email" placeholder="Enter Email">
            </div>
            <div class="formitems"> 
                <input type="text" name="city" id="city" placeholder="Enter City">
            </div>  
            <div class="formitems">
                <label for="skills">Skills:</label><br>
                <label><input type="checkbox" name="skills[]" value="PHP"> PHP</label>
                <label><input type="checkbox" name="skills[]" value="C++"> C++</label>
                <label><input type="checkbox" name="skills[]" value="Python"> Python</label>
            </div>      
            <div class="formitems">
                <label for="gender">Gender:</label><br>
                <label><input type="radio" name="gender" value="Male"> Male</label>
                <label><input type="radio" name="gender" value="Female"> Female</label>
            </div>
            <div class="formitems">
                <label for="actor">Fav Actor?</label><br>
                <select name="actor" id="actor">
                    <option value="Shah Rukh Khan">Shah Rukh Khan</option>
                    <option value="Bilal Abbas Khan">Bilal Abbas Khan</option>
                    <option value="Ranbir Kapoor">Ranbir Kapoor</option>
                </select>
            </div>
            <div class="formitems">
                <label for="salary">Salary Expectation:</label><br>
                <input type="range" name="salary" id="salary" min="20000" max="100000" step="1000" oninput="this.nextElementSibling.value = this.value">
                <output>20000</output>
            </div>        
            <div class="formitems">
                <input type="submit" value="Submit">
            </div>
        </div>
    </form>
</center>

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #1479de;
    }
    .formstyles {
        width: 60%;
        padding: 20px;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    .formitems {
        margin: 15px 0;
        width: 100%;
    }
    input[type="text"], select, input[type="range"] {
        width: 100%;
        padding: 10px;
        margin-top: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
    input[type="checkbox"], input[type="radio"] {
        margin-right: 10px;
    }
    input[type="submit"] {
        background-color: #4CAF50;
        color: white;
        padding: 15px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
    input[type="submit"]:hover {
        background-color: #45a049;
    }
    label {
        font-weight: bold;
    }
    .formitems label {
        display: flex;
        align-items: center;
        margin: 5px 0;
        cursor: pointer;
    }
    output {
        display: inline-block;
        width: 50px;
        text-align: center;
    }
</style>



in userController.php => 

  function NewUserForm2 (Request $req) {
        echo "Form Submitted Succesfully" ; 
        echo '<br>' ; 
        echo "Name : $req->name" ;
        echo '<br>' ; 
        echo "Email : $req->email" ;
        echo '<br>' ; 
        echo "City : $req->city" ;
        echo '<br>';
        echo "Gender : $req->gender" ;
        echo '<br>';
        echo "Fav Actor : $req->actor" ;
        echo '<br>';
        echo "Salary Expectation : $req->salary" ;
        echo '<br>';
        echo "Skills :"  ;
        echo '<br>' ; 
        print_r($req->skills);
        
    }


In web.php => 

use App\Http\Controllers\UserController;

Route::view('/newuserform2', 'userForm2');
Route::post('/newuserform2submit' , [userController::class , 'NewUserForm2']) ;



VERY IMPORTANT NOTE => 

1)while making the form, in the checkboxes fields, we used name="skills[]" i.e. AN ARRAY instead of name="skills" because when we try to access this field data, we can access an array of maximum 3 skills checked by the user, IF WE DIDNT USE ARRAY, Even if the user checked 2 or 3 boxes, we could only access ONLY ONE!!

2) In NewUserForm2 function, we used ->          print_r($req->skills);
we cant use "echo" to render a entire array
need to use print_r to get the entire array 


OUR FORM FINAL OUTPUT ON WEBPAGE => 

route url -> http://127.0.0.1:8000/newuserform2submit
Output -> 

Form Submitted Succesfully
Name : Mohammad Sami
Email : choudharisami2004@gmail.com
City : Mount Abu
Gender : Male
Fav Actor : Shah Rukh Khan
Salary Expectation : 97000
Skills :
Array ( [0] => PHP [1] => C++ [2] => Python )











ADDITIONAL CHATGPT NOTES => 


### Lecture 13: Additional Form Input Fields and Data Retrieval in Laravel

In this lecture, we'll expand on our previous form by adding additional input fields such as checkboxes, radio buttons, dropdowns, and range sliders. We'll also cover how to handle and retrieve the data submitted through these form elements.

#### **1) Creating a New View and Route for the Form**

First, create a new view for the updated form:

```bash
php artisan make:view userForm2
```

Next, define a route to display this form in `web.php`:

```php
// routes/web.php
Route::view('/newuserform2', 'userForm2');
```

#### **2) Creating the Form with Additional Fields**

In `userForm2.blade.php`, create the HTML form with additional input fields:

```html
<!-- resources/views/userForm2.blade.php -->
<center>
    <h1>NEW USER REGISTRATION</h1>

    <form action="/newuserform2submit" method="post">
        @csrf
        <div class="formstyles">
            <div class="formitems">
                <input type="text" name="name" id="name" placeholder="Enter Name">
            </div>
            <div class="formitems">        
                <input type="text" name="email" id="email" placeholder="Enter Email">
            </div>
            <div class="formitems"> 
                <input type="text" name="city" id="city" placeholder="Enter City">
            </div>  
            <div class="formitems">
                <label for="skills">Skills:</label><br>
                <label><input type="checkbox" name="skills[]" value="PHP"> PHP</label>
                <label><input type="checkbox" name="skills[]" value="C++"> C++</label>
                <label><input type="checkbox" name="skills[]" value="Python"> Python</label>
            </div>      
            <div class="formitems">
                <label for="gender">Gender:</label><br>
                <label><input type="radio" name="gender" value="Male"> Male</label>
                <label><input type="radio" name="gender" value="Female"> Female</label>
            </div>
            <div class="formitems">
                <label for="actor">Fav Actor?</label><br>
                <select name="actor" id="actor">
                    <option value="Shah Rukh Khan">Shah Rukh Khan</option>
                    <option value="Bilal Abbas Khan">Bilal Abbas Khan</option>
                    <option value="Ranbir Kapoor">Ranbir Kapoor</option>
                </select>
            </div>
            <div class="formitems">
                <label for="salary">Salary Expectation:</label><br>
                <input type="range" name="salary" id="salary" min="20000" max="100000" step="1000" oninput="this.nextElementSibling.value = this.value">
                <output>20000</output>
            </div>        
            <div class="formitems">
                <input type="submit" value="Submit">
            </div>
        </div>
    </form>
</center>

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #1479de;
    }
    .formstyles {
        width: 60%;
        padding: 20px;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    .formitems {
        margin: 15px 0;
        width: 100%;
    }
    input[type="text"], select, input[type="range"] {
        width: 100%;
        padding: 10px;
        margin-top: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
    input[type="checkbox"], input[type="radio"] {
        margin-right: 10px;
    }
    input[type="submit"] {
        background-color: #4CAF50;
        color: white;
        padding: 15px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
    input[type="submit"]:hover {
        background-color: #45a049;
    }
    label {
        font-weight: bold;
    }
    .formitems label {
        display: flex;
        align-items: center;
        margin: 5px 0;
        cursor: pointer;
    }
    output {
        display: inline-block;
        width: 50px;
        text-align: center;
    }
</style>
```

#### **3) Handling Form Submission**

**A) Update the Controller**

Generate a new controller to handle the form submission:

```bash
php artisan make:controller UserController
```

In `app/Http/Controllers/UserController.php`, add a method to handle the form submission:

```php
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class UserController extends Controller
{
    public function NewUserForm2(Request $request)
    {
        echo "Form Submitted Successfully";
        echo '<br>';
        echo "Name: " . $request->name;
        echo '<br>';
        echo "Email: " . $request->email;
        echo '<br>';
        echo "City: " . $request->city;
        echo '<br>';
        echo "Gender: " . $request->gender;
        echo '<br>';
        echo "Fav Actor: " . $request->actor;
        echo '<br>';
        echo "Salary Expectation: " . $request->salary;
        echo '<br>';
        echo "Skills: ";
        echo '<br>';
        print_r($request->skills);
    }
}
```

**B) Define a Route for Form Submission**

In `web.php`, add a POST route to handle the form submission:

```php
// routes/web.php
use App\Http\Controllers\UserController;

Route::view('/newuserform2', 'userForm2');
Route::post('/newuserform2submit', [UserController::class, 'NewUserForm2']);
```

#### **Important Notes**

1. **Checkboxes as Arrays**: In the form, we used `name="skills[]"` to create an array of selected skills. This allows us to capture multiple selected values. Without using an array, only one value would be captured, even if multiple checkboxes are selected.
   
2. **Handling Arrays in Controllers**: In the `NewUserForm2` function, we used `print_r($request->skills)` to output the array of skills. Using `echo` for arrays will not work correctly, hence `print_r` is used.

#### **Form Output on Webpage**

After submitting the form, the output will be displayed at `http://127.0.0.1:8000/newuserform2submit` as follows:

```
Form Submitted Successfully
Name: Mohammad Sami
Email: choudharisami2004@gmail.com
City: Mount Abu
Gender: Male
Fav Actor: Shah Rukh Khan
Salary Expectation: 97000
Skills:
Array ( [0] => PHP [1] => C++ [2] => Python )
```

### **Summary and Additional Details**

- **Creating Views and Routes**: Use `php artisan make:view` to create views and define routes using `Route::view()` and `Route::post()`.
- **Building Forms with Additional Fields**: Add checkboxes, radio buttons, dropdowns, and range sliders to forms. Use the `@csrf` directive for CSRF protection.
- **Handling Form Submission**: Use controllers to handle form data. Generate controllers using `php artisan make:controller` and define methods to process the form data.
- **Retrieving Form Data**: Access individual form fields using the `$request` object. Use `print_r` to output arrays.
- **Validation and Error Handling**: Validate form data to ensure it meets criteria and handle errors gracefully. This can be added for more robust forms.

### **Deep Dive: CSRF Protection**

Cross-Site Request Forgery (CSRF) is an attack that tricks the victim into submitting a malicious request. Laravel includes CSRF protection by default to secure your application.

When a form is submitted, Laravel compares the session token with the token in the hidden form field (`@csrf`). If the tokens match, the request is processed. If not, the request is rejected, and a 419 error (Page Expired) is returned.

By following these steps and incorporating best practices, you can create comprehensive forms with a variety of input fields and handle their submissions effectively in Laravel.