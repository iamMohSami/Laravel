WHAT IS A MODEL?
Part of mvc architecture
This is a PHP file with class , In model, generally, we write BUSINESS LOGIC and DB CONNECTIONS
But in Laravel we mostly do DB related work , 
In Laravel we have an Object-relational mapper (ORM) Feature in the model 




WHAT IS ELOQUENT MODEL and ORM?
In Laravel Model, these models have an extra feature called as  Object-relational mapper (ORM)
It is very easy for ORM to fetch/add/delete data from DB 



MAIN USES OF ELOQUENT MODEL?
Mostly used to access data from table in DB
Used to fetch/update/add/delete/edit data in the DB 

MAKE A NEW TABLE IN DATABASE and CHECK .env file
Here, we made a new table named "students" and inserted data init


MAKE A MODEL : to fetch data from DB
php artisan make:model modelname

VERY IMPORTANT**  WE HAVE 2 NOTES WHILE KEEPING THE "ModelName" => 
1-> Model name always start with Capital Letter
2-> Model name should always be SINGULAR wrt to the PLURAL name of the TABLE we need to fetch the data
i.e. we need data from table "students" 
Thus, we keep our model name as "Student" 
BUT WHY? By doing this, by default, our TABLE gets connected with the MODEL 
{Even if you dont follow this rule, no worry, we can still fix it and achieve same output by adding a single new line of code, but following this rule is a good industry practice}

php artisan make:model Student

by default code => Student.php => 
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Student extends Model
{
    use HasFactory;
}


MAKE A CONTROLLER AND VIEW 
php artisan make:controller StudentController

StudentController.php => 
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class StudentController extends Controller
{
    //
    function showStudents(){
        $data = \App\Models\Student::all() ; 
        return $data ; 
    }
}


In web.php file => 
use App\Http\Controllers\StudentController;
Route::get('/studentsdata' , [StudentController::class , 'showStudents']) ; 


On Browser : http://127.0.0.1:8000/studentsdata
Output : 
[
  {
    "id": 1,
    "Name": "Mohammad Sami",
    "Branch": "CSE",
    "CGPA": 8.78
  },
  {
    "id": 2,
    "Name": "Salahuddin Ayyubi",
    "Branch": "CSE",
    "CGPA": 10
  },
  {
    "id": 3,
    "Name": "King Baldwin ",
    "Branch": "ECE",
    "CGPA": 5
  }
]


MAKE A NEW VIEW TO DISPLAY THE TABLE DATA => 
php artisan make:view studentsdata

In StudentController.php => 
 function showStudentsTable(){
        $data = \App\Models\Student::all() ; 
        return view('studentsdata' , ['key'=>$data]) ; 
    }

In studentsdata.blade.php view => 
<div>
<h2>Students Data Table</h2>
{{print_r($key)}}
<table border="1">
    <tr>
        <th>Name</th>
        <th>Branch</th>
        <th>CGPA</th>
    </tr>
    @foreach ($key as $stud )
        <tr>
            <td>{{$stud->Name}}</td>
            <td>{{$stud->Branch}}</td>
            <td>{{$stud->CGPA}}</td>
        </tr>
    @endforeach
</table>
</div>

in web.php => 
Route::get('/studentsdatatable' , [StudentController::class , 'showStudentsTable']) ; 

NOW, If our MODEL name is not a singular to a plural table name, then how do we connect that table with our model?

In model file, Student.php => ADD ONE LINE -- protected $table="table_name" ;
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Student extends Model
{
    use HasFactory;
    protected $table="table_name" ;
}


MAKING A NEW FUNCTION IN MODEL FILE AND USE IT?

in model file, Student.php => 

class Student extends Model
{
    use HasFactory;

    function myfun(){
        return "This Text comes from a function in Model file" ; 
    }
}

in StudentController.php => 

 function showStudentsTable(){
        $var = new \App\Models\Student ; 
        echo $var->myfun() ; 
        $data = \App\Models\Student::all() ; 
        return view('studentsdata' , ['key'=>$data]) ; 
    }





ADDITIONAL CHATGPT NOTES : 

Your notes on Eloquent models in Laravel are quite comprehensive. Let's refine them, ensure correctness, and add more details for a deeper understanding.

### What is a Model in MVC Architecture?

**Model:** 
- A Model is a part of the MVC (Model-View-Controller) architecture. 
- It represents the data and the business logic of the application.
- In Laravel, models are typically used for database interactions and contain business logic related to data manipulation.

**Laravel Models:**
- Laravel models leverage Eloquent ORM (Object-Relational Mapper) to interact with the database.
- They simplify database operations by using an object-oriented syntax.

### What is Eloquent ORM?

**Eloquent ORM:**
- Eloquent is Laravel's default ORM, providing a simple and elegant way to interact with the database.
- ORM (Object-Relational Mapper) allows you to map database tables to PHP classes.
- Eloquent makes database operations such as fetching, inserting, updating, and deleting data straightforward by using expressive syntax.

### Main Uses of Eloquent Models

- **Access Data:** Retrieve data from database tables.
- **CRUD Operations:** Create, Read, Update, and Delete records in the database.
- **Relationships:** Define relationships between different models, such as one-to-many or many-to-many.
- **Query Scopes:** Define common queries as reusable methods within the model.

### Step-by-Step Guide to Using Eloquent Models

**Step 1: Make a New Table in the Database**

Create a new table named `students` and insert some data using phpMyAdmin or any other database client.

**Step 2: Check `.env` File**

Ensure the database configuration in the `.env` file is correct:

```plaintext
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=LearnLaravel
DB_USERNAME=root
DB_PASSWORD=
```

**Step 3: Create an Eloquent Model**

Use the artisan command to create a model. Follow the naming convention where the model name is singular and starts with a capital letter:

```bash
php artisan make:model Student
```

By default, Laravel assumes the model `Student` is associated with a table named `students`.

**Generated Model (Student.php):**

```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Student extends Model
{
    use HasFactory;
}
```

**Step 4: Create a Controller and Define Routes**

Create a new controller:

```bash
php artisan make:controller StudentController
```

**StudentController.php:**

```php
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Student;

class StudentController extends Controller
{
    public function showStudents()
    {
        $data = Student::all();
        return $data;
    }

    public function showStudentsTable()
    {
        $data = Student::all();
        return view('studentsdata', ['key' => $data]);
    }
}
```

**Routes in `web.php`:**

```php
use App\Http\Controllers\StudentController;

Route::get('/studentsdata', [StudentController::class, 'showStudents']);
Route::get('/studentsdatatable', [StudentController::class, 'showStudentsTable']);
```

**Step 5: Create a View**

Create a view to display the student data:

```bash
php artisan make:view studentsdata
```

**studentsdata.blade.php:**

```php
<div>
<h2>Students Data Table</h2>
<table border="1">
    <tr>
        <th>Name</th>
        <th>Branch</th>
        <th>CGPA</th>
    </tr>
    @foreach ($key as $stud)
        <tr>
            <td>{{ $stud->Name }}</td>
            <td>{{ $stud->Branch }}</td>
            <td>{{ $stud->CGPA }}</td>
        </tr>
    @endforeach
</table>
</div>
```

### Connecting a Model to a Table with a Different Name

If your model name does not follow the singular form of the table name, specify the table name in the model:

```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Student extends Model
{
    use HasFactory;
    protected $table = "table_name"; // Replace "table_name" with your table name
}
```

### Adding Functions to a Model

You can add custom functions to your model:

**Student.php:**

```php
class Student extends Model
{
    use HasFactory;

    public function myfun()
    {
        return "This text comes from a function in the model file.";
    }
}
```

**Using Custom Function in Controller:**

```php
class StudentController extends Controller
{
    public function showStudentsTable()
    {
        $var = new Student;
        echo $var->myfun();
        $data = Student::all();
        return view('studentsdata', ['key' => $data]);
    }
}
```

### Additional Details for Deep Knowledge

1. **Defining Relationships:**
   - Eloquent makes it easy to define relationships between models. For example, a `User` model might have many `Post` models.

     ```php
     class User extends Model
     {
         public function posts()
         {
             return $this->hasMany(Post::class);
         }
     }
     ```

2. **Query Scopes:**
   - Define common queries as methods in your model to reuse them:

     ```php
     class Student extends Model
     {
         public function scopeActive($query)
         {
             return $query->where('active', 1);
         }
     }
     ```

3. **Mass Assignment:**
   - Protect against mass assignment vulnerabilities by specifying the `$fillable` or `$guarded` properties in your model.

     ```php
     class Student extends Model
     {
         protected $fillable = ['name', 'branch', 'cgpa'];
     }
     ```

By understanding these concepts and using Eloquent ORM effectively, you can manage database interactions in Laravel with ease and efficiency.