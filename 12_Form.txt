                                    STEPS FOR CREATING A FORM



1) Make View and Route for view.

php artisan make:view userForm

and make a Route =>
Route::view('/newuserform' , 'userForm');





2) Make form and input fields.

IN userForm.blade.php view => {create a form}

<center>
<h1>NEW USER REGISTRATION</h1>

<form action="" method="post">                             // action attribute will be filled later, refer at last
<div class="formstyles">
        <div class="formitems">
            <input type="text" name="name" id="name" placeholder="Enter Name">
        </div>
        <div class="formitems">        
            <input type="text" name="email" id="email" placeholder="Enter Email">
        </div>
        <div class="formitems"> 
            <input type="text" name="city" id="city" placeholder="Enter City">
        </div>        
        <div class="formitems">
            <input type="submit" value="Submit">
        </div>
</div>
</form>

</center>

<style>
    .formstyles{
    height: 50%;
    width: 50%;
    background-color: aqua;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 40px;
    }

</style>











3) NOW, IF WE WANT TO SUBMIT THIS FORM AND ACCESS THE DETAILS FILLED IN IT, FOLLOW BELOW STEPS



A}} Make a controller.

php artisan make:controller userController

THUS, IN app/http/controllers/userController.php file is made, in this userController.php file, MAKE A NEW FUNCTION=> 

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;  // by default 
use Illuminate\Support\Facades\View ; //need to import this to use view::exists feature

class UserController extends Controller
{
    function NewUserForm(){
        echo "Form Submitted Succesfully" ; 
    }
}







B}}  Make form submit route.

IN web.php for making a new route => 
Route::post('/newuserformsubmit', [UserController::class , 'NewUserForm'] );

IMP POINTS TO NOTE HERE => 
1) in our form, metod="post" , THUS WE MAKE A POST ROUTE HERE!!
2) in our form, the action="", SHOULD MATCH WITH THE ROUTING URL WE GIVE HERE
i.e.    <form action="/newuserformsubmit" method="post">
WITHOUT THESE 2 POINTS, OUR FORM SUBMISSION WILL NOT WORK





C}} use of @csrf 
When we take care of all the about points and implement them carefully, on clicking submit button, we get 
                            "419 - PAGE EXPIRED"         on webpage 
THIS IS BECAUSE WE HAVE NOT USED "@csrf" in our form
THUS , add a new line -> @csrf 
just below the form tag 

i.e. 
<form action="/newuserformsubmit" method="post">
    @csrf

Now, the "419- PAGE EXPIRED" will be removed and we will get -> Form Submitted Succesfully on webpage as created in our controller function

DETAILS ABOUT @csrf =>

CSRF (Cross-Site Request Forgery) protection is enabled by default in Laravel. You need to include the @csrf directive within your form to generate a hidden input field with a CSRF token. This token is used to verify that the form submission is legitimate.

Without the @csrf directive, you will encounter a "419 - PAGE EXPIRED" error. This directive ensures that your application is protected against CSRF attacks.









4) Get form input field data 



TO GET ENTIRE FORM DATA DEAILS AS JSON FORMAT use => 

in contollers/userController.php , in our function, make these changes => 
 function NewUserForm(Request $req){
        echo "Form Submitted Succesfully" ; 
        return $req ; 
    }

OUTPUT ON WEBPAGE, AFTER SUBMIT BUTTON IS CLICKED => 
Form Submitted Succesfully{"_token":"YiL0wrhmCqC9mNp7PP800TYvVQx7h74mRB7333Lt","name":"Mohammad Sami","email":"choudharisami2004@gmail.com","city":"kOLKATA"}




TO GET ALL THE FIELDS DATA INDIVIDUALLY use =>


function NewUserForm(Request $req){
        echo "Form Submitted Succesfully" ; 
        echo '<br>' ; 
        echo "Name : $req->name" ;
        echo '<br>' ; 
        echo "Email : $req->email" ;
        echo '<br>' ; 
        echo "City : $req->city" ;
    }

OUTPUT ON WEBPAGE, AFTER SUBMIT BUTTON IS CLICKED => 

Form Submitted Succesfully
Name : Mohammad Sami
Email : choudharisami2004@gmail.com
City : Miami










ADDITIONAL CHATGPT NOTES => 

### Lecture 12: Creating a Form and Accessing the Form Data in Laravel

#### **Steps for Creating a Form**

Creating and handling forms in Laravel involves several steps, from creating the form view to handling the form data submission in a controller. Here's a detailed guide on how to achieve this.

#### **1) Creating a View and Route for the View**

First, create a new view for the form:

```bash
php artisan make:view userForm
```

Then, define a route to display this form in your `web.php`:

```php
// routes/web.php
Route::view('/newuserform', 'userForm');
```

#### **2) Creating the Form and Input Fields**

In the `userForm.blade.php` view, create the HTML form:

```html
<!-- resources/views/userForm.blade.php -->
<center>
    <h1>NEW USER REGISTRATION</h1>

    <form action="/newuserformsubmit" method="post">
        @csrf <!-- CSRF token for security -->
        <div class="formstyles">
            <div class="formitems">
                <input type="text" name="name" id="name" placeholder="Enter Name">
            </div>
            <div class="formitems">
                <input type="text" name="email" id="email" placeholder="Enter Email">
            </div>
            <div class="formitems">
                <input type="text" name="city" id="city" placeholder="Enter City">
            </div>
            <div class="formitems">
                <input type="submit" value="Submit">
            </div>
        </div>
    </form>
</center>

<style>
    .formstyles {
        height: 50%;
        width: 50%;
        background-color: aqua;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 40px;
    }
</style>
```

#### **3) Handling Form Submission**

**A) Create a Controller**

Generate a new controller to handle form submission:

```bash
php artisan make:controller UserController
```

In `app/Http/Controllers/UserController.php`, add the function to handle the form submission:

```php
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class UserController extends Controller
{
    public function NewUserForm(Request $request)
    {
        echo "Form Submitted Successfully";
    }
}
```

**B) Define a Route for Form Submission**

In `web.php`, add a POST route to handle the form submission:

```php
// routes/web.php
use App\Http\Controllers\UserController;

Route::post('/newuserformsubmit', [UserController::class, 'NewUserForm']);
```

**C) Using `@csrf` for CSRF Protection**

CSRF (Cross-Site Request Forgery) protection is enabled by default in Laravel. You need to include the `@csrf` directive within your form to generate a hidden input field with a CSRF token. This token is used to verify that the form submission is legitimate.

Without the `@csrf` directive, you will encounter a "419 - PAGE EXPIRED" error. This directive ensures that your application is protected against CSRF attacks.

```html
<form action="/newuserformsubmit" method="post">
    @csrf
    <!-- form fields here -->
</form>
```

#### **4) Accessing Form Data**

**A) Getting Entire Form Data as JSON**

To retrieve all form data as a JSON object, update the controller method as follows:

```php
public function NewUserForm(Request $request)
{
    echo "Form Submitted Successfully";
    return $request;
}
```

**Output:**

```json
Form Submitted Successfully{"_token":"YiL0wrhmCqC9mNp7PP800TYvVQx7h74mRB7333Lt","name":"Mohammad Sami","email":"choudharisami2004@gmail.com","city":"kOLKATA"}
```

**B) Getting Individual Form Fields**

To access individual form fields, you can use the request object:

```php
public function NewUserForm(Request $request)
{
    echo "Form Submitted Successfully";
    echo '<br>';
    echo "Name: " . $request->name;
    echo '<br>';
    echo "Email: " . $request->email;
    echo '<br>';
    echo "City: " . $request->city;
}
```

**Output:**

```
Form Submitted Successfully
Name: Mohammad Sami
Email: choudharisami2004@gmail.com
City: Miami
```

### **Additional Details and Best Practices**

#### **Validation**

Before processing form data, it's important to validate it to ensure that it meets certain criteria. Laravel provides a powerful validation mechanism:

```php
public function NewUserForm(Request $request)
{
    $validatedData = $request->validate([
        'name' => 'required|max:255',
        'email' => 'required|email',
        'city' => 'required|max:100',
    ]);

    // Process the validated data
    echo "Form Submitted Successfully";
    echo '<br>';
    echo "Name: " . $validatedData['name'];
    echo '<br>';
    echo "Email: " . $validatedData['email'];
    echo '<br>';
    echo "City: " . $validatedData['city'];
}
```

#### **Old Input Data**

To retain the old input data when validation fails, you can use `old()` in your form fields:

```html
<input type="text" name="name" id="name" value="{{ old('name') }}" placeholder="Enter Name">
<input type="text" name="email" id="email" value="{{ old('email') }}" placeholder="Enter Email">
<input type="text" name="city" id="city" value="{{ old('city') }}" placeholder="Enter City">
```

#### **Displaying Validation Errors**

To display validation errors in the form, use the `@error` directive:

```html
<input type="text" name="name" id="name" value="{{ old('name') }}" placeholder="Enter Name">
@error('name')
    <div class="alert alert-danger">{{ $message }}</div>
@enderror

<input type="text" name="email" id="email" value="{{ old('email') }}" placeholder="Enter Email">
@error('email')
    <div class="alert alert-danger">{{ $message }}</div>
@enderror

<input type="text" name="city" id="city" value="{{ old('city') }}" placeholder="Enter City">
@error('city')
    <div class="alert alert-danger">{{ $message }}</div>
@enderror
```

#### **Summary**

- **Creating Views and Routes**: Create views using `php artisan make:view` and define routes using `Route::view()`.
- **Building Forms**: Create forms in Blade views and use the `@csrf` directive for CSRF protection.
- **Handling Form Submission**: Create controllers using `php artisan make:controller` and define POST routes for form submission.
- **Accessing Form Data**: Use the `Request` object to access form data. Use `$request->all()` to get all data or `$request->input('fieldname')` to get specific fields.
- **Validation**: Validate form data using Laravel’s validation mechanism to ensure data integrity.
- **Displaying Errors**: Use `@error` directives to display validation errors.

By following these steps and best practices, you can effectively create forms, handle form submissions, and validate user input in your Laravel applications.