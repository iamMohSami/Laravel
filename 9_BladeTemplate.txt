
                                        WHATE IS BLADE TEMPLATE?


Blade is a simple, yet powerful TEMPLTAING ENGINE for executing PHP code. This is included in the Laravel framework

The TEMPLATE ENGINE is a module or tool for executing code
Other Examples :
EJS is template engine to execute JS code in NODEJS Environment

Blade is a templating engine provided by Laravel, which allows you to write PHP code in a clean and readable way. It helps to separate the presentation logic from the business logic, making your code more maintainable and organized. Blade templates are typically used to create views, which are the parts of your application that the user interacts with.

We can write PHP tags also in the blade template  
To use blade template view should end with the .blade.php extension.







                                        WHY DO WE NEED BLADE TEMPLATE?


Code Execution is faster as compared to normal PHP

Faster Code Execution: Blade templates are compiled into plain PHP code and cached until they are modified, which makes them faster than regular PHP templates.
Cleaner Syntax: Blade's syntax is more concise and easier to read compared to standard PHP.
Separation of Concerns: Blade helps in maintaining a clean separation between the presentation layer and the business logic.


                                    CODE EXECUTION

In UserController =>

function BladeFeatures(){
$name = "Sami" ; 
        $myarray = ["Babar" , "Rizwan" , "Shaheen"] ;
        return view('Blade' , ['myname'=>$name , 'players'=>$myarray]);
}

In VIEW =>

<h1>Blade Features Lec 9 </h1>

{{-- DISPLAYING VARIABLES USING BLADE  --}}

<h2>{{$myname}}</h2>

{{-- WITHOUT USING BLADE, ONLY SIMPLE PHP  --}}

<h2><?php echo $myname ?></h2>

{{-- EXECUTING RAND FUNCTION  --}}

<h2>{{rand()}}</h2>
<hr>

{{-- DISPLAYING ARRAYS  --}}

{{-- <h2>{{$players}}</h2> --}}

<h2>Using this command to display the list of arrays =></h2>
<span><h3>$players</h3></span>
<h2>But, this will give an ERROR : htmlspecialchars(): Argument #1 ($string) must be of type string, array given</h2>
<h2>That is : It cannot render all the array list but we can render a single array item OR use a foreach loop to display all the items</h2>
<hr>
<h2>Displaying a Single Item only using INDEX :</h2>
<h2>{{$players[0]}}</h2>
<h2>{{$players[1]}}</h2>
<h2>{{$players[2]}}</h2>
<hr>
<h2>USING Foreach loop : </h2>
@foreach ($players as $player )
    <h2>{{$player}}</h2>
@endforeach
<hr>
<h2>IF - ELSE Condition with For Loop :</h2>
@for ($i=1;$i<=10;$i++)
    <h2>{{$i}} 
    @if ($i%2 == 0)
        EVEN
    @else
        ODD
    @endif
    </h2>
@endfor
<hr>

















CHATGPT EXTRA NOTES =>

Explaining the Syntax and Blade Features
Displaying Variables:

{{$myname}}: This is the Blade syntax to echo out the variable. It automatically escapes the variable to prevent XSS attacks.

<?php echo $myname; ?>: This is the standard PHP syntax for echoing out a variable.

Executing PHP Functions:

{{rand()}}: This is a Blade directive to call the rand() PHP function and display its result.
Displaying Arrays:

{{$players[0]}}, {{$players[1]}}, {{$players[2]}}: Display individual elements of an array using their index.
@foreach ($players as $player): A Blade directive to loop through an array. This simplifies the syntax compared to the standard PHP foreach loop.
Conditional Statements and Loops:

@if and @else: Blade directives for conditional statements.
@for ($i = 1; $i <= 10; $i++): A Blade directive for looping a specified number of times. You can include conditionals within the loop.
More Blade Directives
@if, @elseif, @else:

blade
Copy code
@if (condition)
// Code to execute if condition is true
@elseif (anotherCondition)
// Code to execute if anotherCondition is true
@else
// Code to execute if none of the above conditions are true
@endif
@unless:

blade
Copy code
@unless (condition)
// Code to execute if condition is false
@endunless
@isset and @empty:

blade
Copy code
@isset($variable)
// Code to execute if $variable is set
@endisset

@empty($variable)
// Code to execute if $variable is empty
@endempty
@switch:

blade
Copy code
@switch($variable)
@case('value1')
// Code to execute if $variable is value1
@break

    @case('value2')
        // Code to execute if $variable is value2
        @break

    @default
        // Code to execute if $variable is not any of the above values

@endswitch
By using these Blade directives, you can create complex and dynamic views while keeping your code clean and readable. Blade templates offer a powerful way to manage your views, making it easier to maintain and enhance your application.
