Here, we will see about the HTTP Request Class which helps to access the data entered in the form by the user 

In web.php => 
//lec31 HTTP Route Class 
Route::view('/reqclassform', 'httpreqclass');
Route::post('/httpreq' , [UserController::class , 'httpreqclass']) ;

In httpreqclass.blade.php view =>
<div>
    <h1>SIGNUP FORM</h1>
    <form action="/httpreq" method="post">
        @csrf
        <input type="text" name="fname" placeholder="Enter First Name">
        <br> <br> 
        <input type="text" name="lname" placeholder="Enter Last Name">
        <br> <br>
        <input type="password" name="password" placeholder="Create a Password">
        <br> <br>
        <button>Submit</button>
    </form>
</div>

In UserController.php => 
  function httpreqclass(Request $req) {
        echo "Request Method :" . $req->method() ; 
        echo "<br>" ; 
        echo "Request Path :" . $req->path() ; 
        echo "<br>" ; 
        echo "Request URL :" . $req->url() ; 
        echo "<br>" ; 
        echo "Entered FirstName :" . $req->fname ; 
        echo "<br>" ; 
        //OR 
        echo "Entered FirstName :" . $req->input('fname') ; 
        echo "<br>" ;
        echo "Entered LastName :" . $req->input('lname') ; 
        echo "<br>" ;
        echo "Entered Password :" . $req->input('password') ; 
        echo "<br>" ;
        echo "IP of request:" . $req->ip() ; 
        echo "<br>" ;
        echo "print_r req->input() output:"  ; 
        echo "<br>" ; 
        print_r($req->input()) ; 
        echo "<br>" ;
        echo "print_r req->collect() output:"  ; 
        echo "<br>" ; 
        print_r($req->collect()) ; 
        echo "<br>" ;

        if($req->isMethod('post')){
            echo "Execute code for POST method (If condition is TRUE)" ; 
        }else{
            echo "Execute code for OTHER method (If condition is FALSE)" ; 
        }

        if($req->is('httpreq')){
            echo "Execute code for httpreq is the path (If condition is TRUE)" ; 
        }else{
            echo "Execute code for httpreq is NOT the path (If condition is FALSE)" ; 
        }
    }


BROWSER OUTPUT => 
ON : http://127.0.0.1:8000/reqclassform

SIGNUP FORM
Lana Del

Ray

•••••••

Submit


{{{after submit}}}

ON : http://127.0.0.1:8000/httpreq
Request Method :POST
Request Path :httpreq
Request URL :http://127.0.0.1:8000/httpreq
Entered FirstName :Lana Del
Entered FirstName :Lana Del
Entered LastName :Ray
Entered Password :6314348
IP of request:127.0.0.1
print_r req->input() output:
Array ( [_token] => Gkve7Y35eoaEedGxKnPUWcqGkotqxlloE4PFJkjI [fname] => Lana Del [lname] => Ray [password] => 6314348 )
print_r req->collect() output:
Illuminate\Support\Collection Object ( [items:protected] => Array ( [_token] => Gkve7Y35eoaEedGxKnPUWcqGkotqxlloE4PFJkjI [fname] => Lana Del [lname] => Ray [password] => 6314348 ) [escapeWhenCastingToString:protected] => )
Execute code for POST method (If condition is TRUE)Execute code for httpreq is the path (If condition is TRUE)



ADDITIONAL CHATGPT NOTES => 

### HTTP Request Class in Laravel

The HTTP Request class in Laravel allows you to easily access and manipulate the data sent by a user through forms. Below is a detailed example demonstrating how to use the HTTP Request class.

#### Setting Up Routes and Views

**web.php:**
```php
// lec31 HTTP Route Class
Route::view('/reqclassform', 'httpreqclass');
Route::post('/httpreq', [UserController::class, 'httpreqclass']);
```

**httpreqclass.blade.php:**
```html
<div>
    <h1>SIGNUP FORM</h1>
    <form action="/httpreq" method="post">
        @csrf
        <input type="text" name="fname" placeholder="Enter First Name">
        <br><br>
        <input type="text" name="lname" placeholder="Enter Last Name">
        <br><br>
        <input type="password" name="password" placeholder="Create a Password">
        <br><br>
        <button>Submit</button>
    </form>
</div>
```

#### Controller Logic

**UserController.php:**
```php
use Illuminate\Http\Request;

class UserController extends Controller {
    function httpreqclass(Request $req) {
        echo "Request Method: " . $req->method();
        echo "<br>";
        echo "Request Path: " . $req->path();
        echo "<br>";
        echo "Request URL: " . $req->url();
        echo "<br>";
        echo "Entered FirstName: " . $req->input('fname');
        echo "<br>";
        echo "Entered LastName: " . $req->input('lname');
        echo "<br>";
        echo "Entered Password: " . $req->input('password');
        echo "<br>";
        echo "IP of request: " . $req->ip();
        echo "<br>";
        echo "print_r req->input() output:";
        echo "<br>";
        print_r($req->input());
        echo "<br>";
        echo "print_r req->collect() output:";
        echo "<br>";
        print_r($req->collect());
        echo "<br>";

        if ($req->isMethod('post')) {
            echo "Execute code for POST method (If condition is TRUE)";
        } else {
            echo "Execute code for OTHER method (If condition is FALSE)";
        }

        if ($req->is('httpreq')) {
            echo "Execute code for httpreq is the path (If condition is TRUE)";
        } else {
            echo "Execute code for httpreq is NOT the path (If condition is FALSE)";
        }
    }
}
```

### Explanation

1. **Setting Up the Route and View:**
    - The `Route::view('/reqclassform', 'httpreqclass');` line sets up a route to display the form view.
    - The `Route::post('/httpreq', [UserController::class, 'httpreqclass']);` line sets up a POST route to handle the form submission.

2. **Form in Blade Template:**
    - The form sends a POST request to `/httpreq` when the submit button is clicked.
    - The `@csrf` directive is used to include a CSRF token for security.

3. **Controller Logic:**
    - The `Request` object is injected into the `httpreqclass` method, allowing access to the request data.
    - Various methods of the `Request` object are used to retrieve information:
        - `method()`: Retrieves the HTTP method of the request.
        - `path()`: Retrieves the path of the request.
        - `url()`: Retrieves the full URL of the request.
        - `input('key')`: Retrieves the value of a specific input field.
        - `ip()`: Retrieves the IP address of the client making the request.
        - `input()`: Retrieves all input data as an associative array.
        - `collect()`: Converts the input data to a Laravel collection.
    - Conditional checks using `isMethod` and `is` methods:
        - `isMethod('post')`: Checks if the request method is POST.
        - `is('httpreq')`: Checks if the request path matches `httpreq`.

### Additional Details

1. **Retrieving Input Data:**
    - `all()`: Retrieves all input data.
    - `query()`: Retrieves query string data.
    - `has()`: Checks if the request contains a specific input.
    - `filled()`: Checks if the input is present and not empty.
    - `boolean()`: Retrieves a boolean value from the request input.

2. **Handling Files:**
    - `file('file_input_name')`: Retrieves an uploaded file.
    - `hasFile('file_input_name')`: Checks if a file was uploaded.

3. **Accessing Headers:**
    - `header('header_name')`: Retrieves a specific header value.
    - `headers->all()`: Retrieves all headers.

4. **Validation:**
    - The request class can also be used to validate incoming data using the `validate` method:
    ```php
    $validated = $req->validate([
        'fname' => 'required|string|max:255',
        'lname' => 'required|string|max:255',
        'password' => 'required|string|min:8',
    ]);
    ```

### Summary

- The HTTP Request class in Laravel provides a convenient way to access and manipulate request data.
- Methods such as `input()`, `method()`, `path()`, and `url()` offer easy access to various request components.
- Conditional methods like `isMethod()` and `is()` help tailor responses based on the request's characteristics.
- Understanding and utilizing these methods can significantly enhance the handling of form submissions and other user interactions in Laravel applications.