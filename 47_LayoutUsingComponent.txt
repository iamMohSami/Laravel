Now, Here, we will have 3 view files : Home | About | Login 
All these pages will have same Header, NavBar and Footer 
So, instead of writing code of these in all three files, we will make a component named "layout" and use this component in all 3 files 


What is Layout? 
Common Template for : 
reuse code, reuse common  UI , reuse style, create similiar look and feel of application 


Lets create 3 view files : 

PS C:\xampp\htdocs\MyProject> php artisan make:view layoutHome

   INFO  View [C:\xampp\htdocs\MyProject\resources\views\layoutHome.blade.php] created successfully.

PS C:\xampp\htdocs\MyProject> php artisan make:view layoutAbout

   INFO  View [C:\xampp\htdocs\MyProject\resources\views\layoutAbout.blade.php] created successfully.

PS C:\xampp\htdocs\MyProject> php artisan make:view layoutLogin

   INFO  View [C:\xampp\htdocs\MyProject\resources\views\layoutLogin.blade.php] created successfully.


In web.php => 
Route::view('/layouthome', 'layoutHome');
Route::view('/layoutabout', 'layoutAbout');
Route::view('/layoutlogin', 'layoutLogin');


Make a Component named "layout" =>
PS C:\xampp\htdocs\MyProject> php artisan make:component Layout

   INFO  Component [C:\xampp\htdocs\MyProject\app\View\Components\Layout.php] created successfully.


Insert code of TEMPLATE in this component file => 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>LAYOUT</title>
</head>
<body>
    <div class="header">
        <ul class="list">
            <li><a href="layouthome">Home</a></li>
            <li><a href="layoutabout">About</a></li>
            <li><a href="layoutlogin">Login</a></li>
        </ul>
    </div>

    <div class="content">
        <h1>LAYOUT</h1> 
        <h3>Sub Heading</h3>
        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius error hic suscipit aut quas illo. Eos ullam quasi quos possimus!</p>
    </div>

    <div class="footer">
        Footer 
    </div>
</body>
</html>

<style>
    *{
        margin: 0;
        padding: 0;
    }
    .list{
        display: flex ; 
        align-items: center ; 
        justify-content: space-between ; 
    }
    .header{
        width: 100%;
        height: 30px; 
        background-color: aqua;
    }
    a{
        text-decoration: none ; 
    }
    .content{
        margin: 20px ; 
        padding: 5px; ;
    }
    .footer{
        width: 100%;
        height: 30px; 
        background-color: aqua;
    }
</style>



NOW, to use this component in our View files => 
syntax : just add "<x-layout> </x-layout>" in the view file, it will bring the entire layout code to it 

i.e.=> 
in layoutHome.blade.view => 
<x-layout>
    
</x-layout>

On browser : http://127.0.0.1:8000/layouthome

Home
About
Login
LAYOUT
Sub Heading
Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius error hic suscipit aut quas illo. Eos ullam quasi quos possimus!

Footer


NOW, WE WLL SEE HOW TO MAKE THIS LAYOUT CONTENT AS "DYNAMIC" => 
need to use :     <x-slot name="Name Given in Layout page">Content you want </x-slot>

i.e. 

in layoutHome.blade.view => 
<x-layout>
    <x-slot name="title">Home Page</x-slot>
    <x-slot name="heading">Home</x-slot>
</x-layout>

in layoutAbout.blade.view => 
<x-layout>
    <x-slot name="title">About Page</x-slot>
    <x-slot name="heading">About</x-slot>
</x-layout>

in layoutLogin.blade.view => 
<x-layout>
    <x-slot name="title">Login Page</x-slot>
    <x-slot name="heading">Login</x-slot>
</x-layout>

ALSO, WE NEED TO ADD {{$name}} in the layout file => 

in layout.php => 

    <title>{{$title}}</title>

     <div class="content">
        <h1>{{$heading}}</h1> 
        <h3>Sub Heading</h3>
        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius error hic suscipit aut quas illo. Eos ullam quasi quos possimus!</p>
    </div>


THUS, ON BROWSER => http://127.0.0.1:8000/layouthome
Home
About
Login
Home
Sub Heading
Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius error hic suscipit aut quas illo. Eos ullam quasi quos possimus!

Footer

ON BROWSER => http://127.0.0.1:8000/layoutabout
Home
About
Login
About
Sub Heading
Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius error hic suscipit aut quas illo. Eos ullam quasi quos possimus!

Footer

ON BROWSER => http://127.0.0.1:8000/layoutlogin
Home
About
Login
Login
Sub Heading
Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius error hic suscipit aut quas illo. Eos ullam quasi quos possimus!

Footer


ADDITIONAL CHATGPT NOTES : 
### Creating Layout Using Components in Laravel

#### Overview
Creating layouts using components in Laravel is a powerful way to build reusable and dynamic templates for your application. This approach helps maintain consistency across different pages and reduces redundancy in your code.

#### Steps and Explanations

##### 1. **Creating the View Files**
We will create three view files: Home, About, and Login. These pages will share the same header, navbar, and footer.

Commands to create the view files:
```sh
php artisan make:view layoutHome
php artisan make:view layoutAbout
php artisan make:view layoutLogin
```

##### 2. **Defining Routes in web.php**
In `web.php`, define routes for the new views:
```php
use Illuminate\Support\Facades\Route;

Route::view('/layouthome', 'layoutHome');
Route::view('/layoutabout', 'layoutAbout');
Route::view('/layoutlogin', 'layoutLogin');
```

##### 3. **Creating the Layout Component**
Create a component named "Layout" to encapsulate the common structure.

Command to create the component:
```sh
php artisan make:component Layout
```

This command generates two files: `Layout.php` (in `app/View/Components`) and `layout.blade.php` (in `resources/views/components`).

##### 4. **Defining the Layout Structure**
Insert the HTML structure in `layout.blade.php`:

```html
<!-- resources/views/components/layout.blade.php -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>{{ $title }}</title>
</head>
<body>
    <div class="header">
        <ul class="list">
            <li><a href="/layouthome">Home</a></li>
            <li><a href="/layoutabout">About</a></li>
            <li><a href="/layoutlogin">Login</a></li>
        </ul>
    </div>

    <div class="content">
        <h1>{{ $heading }}</h1>
        <h3>Sub Heading</h3>
        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius error hic suscipit aut quas illo. Eos ullam quasi quos possimus!</p>
    </div>

    <div class="footer">
        Footer
    </div>
</body>
</html>

<style>
    * {
        margin: 0;
        padding: 0;
    }
    .list {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }
    .header {
        width: 100%;
        height: 30px;
        background-color: aqua;
    }
    a {
        text-decoration: none;
    }
    .content {
        margin: 20px;
        padding: 5px;
    }
    .footer {
        width: 100%;
        height: 30px;
        background-color: aqua;
    }
</style>
```

##### 5. **Using the Layout Component in Views**
To use the component in your views, add `<x-layout> </x-layout>` and pass dynamic content using `<x-slot>`:

###### layoutHome.blade.php
```html
<x-layout>
    <x-slot name="title">Home Page</x-slot>
    <x-slot name="heading">Home</x-slot>
</x-layout>
```

###### layoutAbout.blade.php
```html
<x-layout>
    <x-slot name="title">About Page</x-slot>
    <x-slot name="heading">About</x-slot>
</x-layout>
```

###### layoutLogin.blade.php
```html
<x-layout>
    <x-slot name="title">Login Page</x-slot>
    <x-slot name="heading">Login</x-slot>
</x-layout>
```

##### 6. **Viewing the Pages**
You can now view the pages in the browser:
- Home: `http://127.0.0.1:8000/layouthome`
- About: `http://127.0.0.1:8000/layoutabout`
- Login: `http://127.0.0.1:8000/layoutlogin`

#### Summary
Using Blade components to create layouts in Laravel promotes code reuse and consistency across different views. By encapsulating common structures (like headers, navbars, and footers) into a single component, you ensure that your application has a uniform look and feel while reducing the amount of redundant code.

#### Additional Details
- **Component Attributes**: You can pass additional data to components as attributes. For example, `<x-layout :title="$pageTitle">`.
- **Nested Components**: Components can include other components, allowing you to build complex UIs.
- **Inline Components**: Laravel also supports inline components, which are defined directly within the Blade file using the `@component` directive.

By mastering Blade components, you can significantly improve the maintainability and scalability of your Laravel applications.