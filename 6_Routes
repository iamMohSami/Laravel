                                            <--WHAT IS ROUTING-->

Routes : The URL/Link to open any page which a user can see is known as the ROUTE

Advance Routing features proivided by Laravel =>

1.  remove the extension if required i.e. can use app/home instead of app/home.php
2.  can open the file with a different named route apart from the filename

                                            <--HOW TO MAKE A ROUTE -->

To create a new page :
New File -> home.blade.php

<h1>Home Page</h1>

In order to display this :
Need to add a Route

In Routes folder --
In web.php file --

ADD NEW CODE

Route::get('/home', function () {
return view('home');
});

Thus, on the output on browser,

ON http://127.0.0.1:8000/home
we get : <h1>Home Page</h1>

ON http://127.0.0.1:8000
we get : <h1>Hello</h1>

                                            <--OPEN ANY VIEW WITH ROUTING -->

In order to open a view, we have 2 methods

METHOD 1 =
Route::get('/home', function () {
return view('home');
});

METHOD 2=
Route::view('/home' , 'home');
{This shortcut method can only be used to open a view
But, if we want to open any Controllers, we need to only use method 1}

                                    <--PASSING DATA IN ROUTING // RENDERING DYNAMIC CONTENT--->

Make a new view : about.blade.php

<h1>Hello</h1>
<h1>This is About Page</h1>
<h1>Good to see you {{$name}} sir</h1>

Make its Route ==>>

Route::get('/about/{name}', function ($name) {
echo "Username -> $name";
return view('about', ['name' => $name]);
});

On Browser ==>>

http://127.0.0.1:8000/about/
ERROR (bcoz no additional name info give in the route path)

http://127.0.0.1:8000/about/messi
Username -> messi
Hello
This is About Page
Good to see you messi sir

                                    <--WORKING OF ANCHOR TAGS--->

we use anchor tags to jump from one page to other
this can also be done with the help of Routes

In our Starting welcome.blade.php page =>

<h1>Hello </h1>

<h3>Click below to go on other Pages</h3>
<a href="/home">Home</a>
<a href="/about/sami">About Sami</a>

                                    <--OTHER ROUTING METHODS used in api and forms--->

Route::get($uri, $callback);
Route::post($uri, $callback);
Route::put($uri, $callback);
Route::patch($uri, $callback);
Route::delete($uri, $callback);
Route::options($uri, $callback);

                                      CHAT GPT EXTERNAL NOTES

---

## Lecture Notes: Understanding Routing Methods and Blade Template Syntax in Laravel

In this lecture, we will delve deeper into routing in Laravel, including advanced features, creating routes, and rendering dynamic content. We will also cover Blade template syntax to effectively pass and display data in views.

### What is Routing?

- **Definition:**
  - A route is the URL or link that a user can see and interact with to open a page in a web application.
  - It maps URLs to specific functions or views within your application.

### Advanced Routing Features in Laravel

1. **Remove File Extensions:**

   - Laravel allows you to create routes that do not require file extensions.
   - **Example:** You can use `app/home` instead of `app/home.php`. This makes URLs cleaner and more user-friendly.

2. **Custom Named Routes:**
   - Routes can have names different from the actual file names.
   - **Example:** You can route `app/home` to a file named `dashboard.blade.php`. This means the URL does not have to directly reflect the file structure, providing flexibility in URL design.

### How to Make a Route

To create a new page in Laravel, follow these steps:

#### Step 1: Create a New View File

- **Create a file named `home.blade.php` in the `resources/views` folder.**

```html
<!-- resources/views/home.blade.php -->
<h1>Home Page</h1>
```

#### Step 2: Add a Route

- **Open the `routes/web.php` file and add the following code:**

```php
// routes/web.php
Route::get('/home', function () {
    return view('home');
});
```

- **What Happens:**
  - When you visit `http://127.0.0.1:8000/home`, you will see the content of the `home.blade.php` file.
  - Visiting `http://127.0.0.1:8000` will display a default message or page.

### Methods to Open a View with Routing

#### Method 1: Using `Route::get`

```php
// routes/web.php
Route::get('/home', function () {
    return view('home');
});
```

- **Description:**
  - This method is used to handle GET requests and returns the `home` view.

#### Method 2: Using `Route::view`

```php
// routes/web.php
Route::view('/home', 'home');
```

- **Description:**
  - This is a shortcut method to directly return a view.
  - **Limitation:** Can only be used for views. For controller actions, use Method 1.

### Passing Data in Routing (Rendering Dynamic Content)

To pass data to a view dynamically:

#### Step 1: Create a New View File

- **Create a file named `about.blade.php` in the `resources/views` folder.**

```html
<!-- resources/views/about.blade.php -->
<h1>Hello</h1>
<h1>This is About Page</h1>
<h1>Good to see you {{$name}} sir</h1>
```

- **Explanation of Blade Syntax:**
  - `{{$name}}` is Blade's syntax for echoing out a PHP variable. It is a shorthand for `<?php echo $name; ?>`.
  - Blade provides a simple and convenient way to display data passed from the controller or route.

#### Step 2: Add a Route with Dynamic Data

```php
// routes/web.php
Route::get('/about/{name}', function ($name) {
    echo "Username -> $name";
    return view('about', ['name' => $name]);
});
```

- **Explanation of Route Syntax:**
  - The `{name}` in the URL is a route parameter. It allows dynamic values to be passed via the URL.
  - The `$name` parameter in the callback function captures this value.
  - The `view('about', ['name' => $name])` part creates an array with a key of `name` and the value of the `$name` variable. This array is passed to the view.
  - In the view (`about.blade.php`), `{{$name}}` will then be replaced with the value of `$name`.

### Example in Browser

- **URL:** `http://127.0.0.1:8000/about/messi`
- **Output:**
  ```
  Username -> messi
  Hello
  This is About Page
  Good to see you messi sir
  ```

### Working with Anchor Tags

Anchor tags can be used to navigate between different pages using routes.

#### Example

- **Add the following code to `welcome.blade.php`:**

```html
<!-- resources/views/welcome.blade.php -->
<h1>Hello</h1>
<h3>Click below to go on other Pages</h3>
<a href="/home">Home</a>
<a href="/about/sami">About Sami</a>
```

- **Explanation:**
  - Clicking on "Home" will navigate to the home page.
  - Clicking on "About Sami" will navigate to the about page with the name `sami`.

### Other Routing Methods

Laravel supports various HTTP methods for routing, commonly used in APIs and forms.

#### Common Routing Methods

```php
Route::get($uri, $callback);    // Handles GET requests
Route::post($uri, $callback);   // Handles POST requests
Route::put($uri, $callback);    // Handles PUT requests
Route::patch($uri, $callback);  // Handles PATCH requests
Route::delete($uri, $callback); // Handles DELETE requests
Route::options($uri, $callback);// Handles OPTIONS requests
```

- **Examples:**
  - **GET Request:**
    ```php
    Route::get('/profile', function () {
        // Code to display user profile
    });
    ```
  - **POST Request:**
    ```php
    Route::post('/profile', function () {
        // Code to handle form submission
    });
    ```

### Summary

Routing in Laravel is powerful and flexible, allowing you to easily manage how users navigate your application. By understanding and using various routing methods, you can create dynamic, user-friendly web applications.

Blade template syntax simplifies the process of displaying data and creating dynamic content. Understanding how to pass data to views and render it appropriately is crucial for developing interactive applications.

---
