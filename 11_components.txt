                            WHAT ARE COMPONENTS??

A piece of code that can reuse in our project.
Like a function is written once can reuse again and again.
We can make a component and reuse it again and again.
Component can be reused in the same file as well as different files also.

Difference Btw Functions and Components =>
A function is created in a PROGRAMMING LANGUAGE and only contains CODE OF THAT SPECIFIC LANGUAGE
A component is created in FRAMEWORKS and contains CODE OF THAT SPECIFIC LANGUAGE,CSS,JS AND OTHER UI components


Example of COMPONENTS :  Messages like SUCCESS, ERROR, OOPS, ALERT on Login/SignUp/Any Finctionality like Buying a product,Return,Submit Form.....These Messages can be reused many times for different purposes. So to display the messages we can build them as a COMPONENT and reuse it










                            MAKING A NEW COMPONENT!!


Here, we will make 3 components : SUCCESS, ALERT and WARNING

first of all => php artisan make::component Messages
PS C:\xampp\htdocs\MyProject> php artisan make:component Messages 

   INFO  Component [C:\xampp\htdocs\MyProject\app\View\Components\Messages.php] created successfully.

This will create 2 NEW FILES =>
A new folder named VIEW\COMPONENTS in the APP DIRECTORY and create a file Messages.php1
A new folder named COMPONENTS in the resources->views directory and create file messages.blade.php
These 2 files contain some default code init 


NOW, in messages.blade.php file =>
<div>
    <span class="success">SUCCESS Message</span>
</div>

<style>
    .success{
        margin: 3px;
        padding: 5px;
        height: 30px;
        background-color: green;
        color: white;
        border: 2px solid black;
    }
</style>

THROUGH THIS CODE WE HAVE CREATED A COMPONENT, BUT WE ALSO NEED TO KNOW HOW TO INSERT/USE it in various VIEW pages
To Use a Component=>   <x-NAME_OF_COMPONENT/>

Thus, Here, In HOME.BLADE.PHP => 
We write => <x-messages/>












                            PASSING DYNAMIC DATA IN THE SUCCESS COMPONET 


create a new component => php artisan make:component dynamicCompWithData

In dynamicCompWithData.blade.php => 
<div>
    <span class="success">{{$msg}}</span>
</div>

<style>
    .success{
        margin-bottom: 10px;
        padding: 5px;
        height: 30px;
        background-color: green;
        color: white;
        border: 2px solid black;
    }
</style>

AND in dynamicCompWithData.php IN THE APP FOLDER =>
<?php

namespace App\View\Components;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class dynamicCompwithData extends Component
{
    /**
     * Create a new component instance.
     */
    public $msg ; 
    public function __construct($msg)
    {
        $this->msg=$msg;
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.dynamic-compwith-data');
    }
}

AND IN home.blade.php => 
<h3>Components with Dynamic Messages - Passing DATA to the components</h3>
<x-dynamicCompwithData msg="SignUp Sucess - Component with Data Passed"/>
<br>
<x-dynamicCompwithData msg="LoginIn Sucess - Component with Data Passed"/>














                    PASSING DYNAMIC DATA and DYNAMIC CLASS NAME and CREATE ALL 3 COMPONENT Message 



create a new component => php artisan make:component dynamicClassAllmsgs

In dynamicClassAllmsgs.blade.php => 
<div>
    <span class="{{$class}}">{{$msg}}</span>
</div>

<style>
    .success{
        margin-bottom: 10px;
        padding: 5px;
        height: 30px;
        background-color: green;
        color: white;
        border: 2px solid black;
    }
    .error{
        margin-bottom: 10px;
        padding: 5px;
        height: 30px;
        background-color: red;
        color: white;
        border: 2px solid black;
    }
    .alert{
        margin-bottom: 10px;
        padding: 5px;
        height: 30px;
        background-color: orange;
        color: black;
        border: 2px solid black;
    }
</style>

AND in dynamicClassAllmsgs.php IN THE APP FOLDER =>
<?php

namespace App\View\Components;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class dynamicClassAllmsgs extends Component
{
    /**
     * Create a new component instance.
     */
    public $msg;
    public $class;

    public function __construct($msg,$class)
    {
        //
        $this->msg=$msg;
        $this->class=$class;
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.dynamic-class-allmsgs');
    }
}


AND IN home.blade.php => 
<h3>Components with Dynamic Messages and Dynamic Class - ALL MESSAGES - Passing DATA to the components</h3>
<x-dynamicClassAllmsgs msg="Hurray.. You WON!!" class="success"/> <br>
<x-dynamicClassAllmsgs msg="ERROR - Invalid User" class="error"/> <br>  
<x-dynamicClassAllmsgs msg="ALERT - This might be dangerous" class="alert"/>
<br>






























EXTRA CHAT GPT NOTES => 

### Lecture 11: Components in Laravel

#### **What are Components?**

Components in Laravel are reusable pieces of code that can encapsulate both logic and presentation. They allow you to create reusable elements like buttons, alerts, and form fields that can be used throughout your application. Unlike traditional functions, components can include HTML, CSS, JavaScript, and PHP, making them highly versatile and powerful for creating dynamic web pages.

#### **Why Use Components?**

1. **Reusability**: Components can be reused across multiple views, reducing code duplication.
2. **Maintainability**: By encapsulating specific pieces of functionality, components make your code easier to maintain and update.
3. **Modularity**: Components promote a modular architecture, making your codebase more organized and easier to manage.

#### **Creating a New Component**

To create a component in Laravel, you can use the Artisan command line tool. Hereâ€™s how you can create a basic component and use it in your views.

1. **Creating a Component**

   Run the following command to create a new component:

   ```bash
   php artisan make:component Messages
   ```

   This command generates two files:
   - `app/View/Components/Messages.php`: The PHP class for the component.
   - `resources/views/components/messages.blade.php`: The Blade view for the component.

2. **Defining the Component**

   In `resources/views/components/messages.blade.php`:

   ```html
   <!-- resources/views/components/messages.blade.php -->
   <div>
       <span class="success">SUCCESS Message</span>
   </div>

   <style>
       .success {
           margin: 3px;
           padding: 5px;
           height: 30px;
           background-color: green;
           color: white;
           border: 2px solid black;
       }
   </style>
   ```

3. **Using the Component**

   To use the component in a view, use the `<x-component-name />` syntax. For example, in `home.blade.php`:

   ```html
   <!-- resources/views/home.blade.php -->
   <h1>Welcome to Home Page</h1>
   <x-messages />
   ```

#### **Passing Dynamic Data to Components**

You can pass dynamic data to components by defining properties in the component class and passing the data when using the component.

1. **Creating a Dynamic Component**

   Run the following command to create a new dynamic component:

   ```bash
   php artisan make:component DynamicCompWithData
   ```

2. **Defining the Component**

   In `resources/views/components/dynamic-comp-with-data.blade.php`:

   ```html
   <!-- resources/views/components/dynamic-comp-with-data.blade.php -->
   <div>
       <span class="success">{{ $msg }}</span>
   </div>

   <style>
       .success {
           margin-bottom: 10px;
           padding: 5px;
           height: 30px;
           background-color: green;
           color: white;
           border: 2px solid black;
       }
   </style>
   ```

3. **Setting Up the Component Class**

   In `app/View/Components/DynamicCompWithData.php`:

   ```php
   <?php

   namespace App\View\Components;

   use Closure;
   use Illuminate\Contracts\View\View;
   use Illuminate\View\Component;

   class DynamicCompWithData extends Component
   {
       public $msg;

       public function __construct($msg)
       {
           $this->msg = $msg;
       }

       public function render(): View|Closure|string
       {
           return view('components.dynamic-comp-with-data');
       }
   }
   ```

4. **Using the Component with Data**

   In `home.blade.php`:

   ```html
   <!-- resources/views/home.blade.php -->
   <h3>Components with Dynamic Messages - Passing Data to the Components</h3>
   <x-dynamic-comp-with-data msg="SignUp Success - Component with Data Passed" />
   <br>
   <x-dynamic-comp-with-data msg="Login Success - Component with Data Passed" />
   ```

#### **Creating a Component with Dynamic Data and Class Names**

You can pass multiple pieces of dynamic data, such as class names, to customize the component further.

1. **Creating a Complex Component**

   Run the following command to create a new component:

   ```bash
   php artisan make:component DynamicClassAllMsgs
   ```

2. **Defining the Component**

   In `resources/views/components/dynamic-class-allmsgs.blade.php`:

   ```html
   <!-- resources/views/components/dynamic-class-allmsgs.blade.php -->
   <div>
       <span class="{{ $class }}">{{ $msg }}</span>
   </div>

   <style>
       .success {
           margin-bottom: 10px;
           padding: 5px;
           height: 30px;
           background-color: green;
           color: white;
           border: 2px solid black;
       }
       .error {
           margin-bottom: 10px;
           padding: 5px;
           height: 30px;
           background-color: red;
           color: white;
           border: 2px solid black;
       }
       .alert {
           margin-bottom: 10px;
           padding: 5px;
           height: 30px;
           background-color: orange;
           color: black;
           border: 2px solid black;
       }
   </style>
   ```

3. **Setting Up the Component Class**

   In `app/View/Components/DynamicClassAllMsgs.php`:

   ```php
   <?php

   namespace App\View\Components;

   use Closure;
   use Illuminate\Contracts\View\View;
   use Illuminate\View\Component;

   class DynamicClassAllMsgs extends Component
   {
       public $msg;
       public $class;

       public function __construct($msg, $class)
       {
           $this->msg = $msg;
           $this->class = $class;
       }

       public function render(): View|Closure|string
       {
           return view('components.dynamic-class-allmsgs');
       }
   }
   ```

4. **Using the Component with Data and Class Names**

   In `home.blade.php`:

   ```html
   <!-- resources/views/home.blade.php -->
   <h3>Components with Dynamic Messages and Dynamic Class - All Messages - Passing Data to the Components</h3>
   <x-dynamic-class-allmsgs msg="Hurray.. You WON!!" class="success" />
   <br>
   <x-dynamic-class-allmsgs msg="ERROR - Invalid User" class="error" />
   <br>
   <x-dynamic-class-allmsgs msg="ALERT - This might be dangerous" class="alert" />
   <br>
   ```

#### **Advanced Features and Best Practices**

1. **Component Slots**

   Slots are a way to define placeholders in your components that can be filled with custom content when using the component.

   **Defining a Slot:**

   ```html
   <!-- resources/views/components/alert.blade.php -->
   <div class="alert alert-{{ $type }}">
       {{ $slot }}
   </div>
   ```

   **Using a Slot:**

   ```html
   <x-alert type="danger">
       <strong>Whoops!</strong> Something went wrong!
   </x-alert>
   ```

2. **Inline Components**

   For simple components, you can use inline components to keep the component definition within a single file.

   ```php
   php artisan make:component Button --inline
   ```

   This will generate a single file `Button.php` containing both the class and the view.

3. **Dynamic Attributes**

   You can pass dynamic attributes to components using the `@props` directive.

   **Defining Dynamic Attributes:**

   ```html
   <!-- resources/views/components/button.blade.php -->
   @props(['type' => 'button'])

   <button type="{{ $type }}" {{ $attributes->merge(['class' => 'btn']) }}>
       {{ $slot }}
   </button>
   ```

   **Using Dynamic Attributes:**

   ```html
   <x-button type="submit" class="btn-primary">
       Submit
   </x-button>
   ```

4. **Anonymous Components**

   Anonymous components are simpler to define as they donâ€™t require a corresponding class. They are ideal for simple reusable components.

   **Creating an Anonymous Component:**

   ```html
   <!-- resources/views/components/anonymous-alert.blade.php -->
   <div class="alert alert-{{ $type }}">
       {{ $slot }}
   </div>
   ```

   **Using an Anonymous Component:**

   ```html
   <x-anonymous-alert type="success">
       This is a success alert!
   </x-anonymous-alert>
   ```

### **Summary**

- **Components**: Reusable, modular pieces of code that can include HTML, CSS, JavaScript, and PHP.
- **Creating Components**: Use the `php artisan make:component` command to create new components.
- **Using Components**: Include components in views using the `<x-component-name />` syntax.
- **Dynamic Data**: Pass dynamic data to components through properties and use them within the component view.
- **Advanced Features**: Utilize slots, inline components, dynamic attributes, and anonymous components for more advanced use cases.

By understanding and utilizing components, you can create more maintainable, reusable, and organized code, enhancing your Laravel development experience.